(* The AST expressed here is a subset of the whole AST, 
 * this is what the result of parsing can be as well as
 * what the typechecker can type. On eval we extend it.
 *)

expr : type.
typ : type.

(* Lambda constructs *)
let : bindone expr expr -> bindone expr expr -> expr.
lam : bindone expr expr -> expr.
app : expr -> expr -> expr.

(* Constants *)
eint : int -> expr.
ebool : bool -> expr.
estr : string -> expr.

(* Operations *)
ite : expr -> expr -> expr -> expr.

unop : type.
eunop : unop -> expr -> expr.
blame : unop.
isNum : unop.
isBool : unop.
isStr : unop.
isFun : unop.

binop : type.
ebinop : expr -> binop -> expr -> expr.
add : binop.
sub : binop.
mul : binop.

(* Typing *)
promise : typ -> expr -> expr.
assume : typ -> expr -> expr -> expr.

(* Blaming *)
label : bool -> string -> expr.

(* Variables *)
named : string -> expr.

(* Types *)
tdyn : typ.
tnum : typ.
tbool : typ.
tstr : typ.
tlbl : typ.
tarrow : typ -> typ -> typ.
fromExpr : expr -> typ.
