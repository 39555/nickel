use crate::identifier::Ident;
use crate::label::{Label, TyPath};
use crate::term::{BinaryOp, RichTerm, Term, UnaryOp};
use crate::types::{Types, AbsType};
use std::str::FromStr;
use either::*;

grammar;

pub Term: RichTerm = SpTerm<RichTerm>;

SpTerm<Rule>: RichTerm =
    <l: @L> <t: Rule> <r: @R> => match t {
        RichTerm {term: t, pos: _} => RichTerm {term: t, pos: Some((l, r))}
    };

RichTerm: RichTerm = {
    "fun" <p:Pattern> "=>" <t: SpTerm<Term>> =>
        RichTerm::new(Term::Fun(p, t)),
    "let" <id:Ident> "=" <t1:SpTerm<Term>> "in" <t2:SpTerm<Term>> =>
        RichTerm::new(Term::Let(id, t1, t2)),
    "if" <b:SpTerm<Term>> "then" <t:SpTerm<Term>> "else" <e:SpTerm<Term>> =>
        RichTerm::app(RichTerm::app(RichTerm::new(Term::Op1(UnaryOp::Ite(), b)), t), e),
    SpTerm<Operation>    
};

Operation: RichTerm = {
    <t1: SpTerm< Applicative>> <op: BOpIn> <t2: SpTerm<Operation>> => RichTerm::new(Term::Op2(op, t1, t2)),
    SpTerm< Applicative>,
};

Applicative: RichTerm = {
    <t1:SpTerm< Applicative>> <t2: SpTerm<Atom>> => RichTerm::new(Term::App(t1, t2)),
    <op: UOp> <t: SpTerm<Atom>> => RichTerm::new(Term::Op1(op, t)),
    <op: BOpPre> <t1: SpTerm<Atom>> <t2: SpTerm<Atom>> => RichTerm::new(Term::Op2(op, t1, t2)),
    SpTerm<Atom>,
};

Atom: RichTerm = {
    "(" <SpTerm<Term>> ")",
    <l:@L> "Promise(" <ty: Types> "," <t: SpTerm<Term>> ")" <r:@R> =>
        RichTerm::new(Term::Promise(ty, Label{tag: "A promise".to_string(), l: l, r: r, polarity: true, path: TyPath::Nil()}, t)),
    <l:@L> "Assume(" <ty: Types> "," <t: SpTerm<Term>> ")" <r:@R> =>
        RichTerm::new(Term::Assume(ty, Label{tag: "An assume".to_string(), l: l, r: r, polarity: true, path: TyPath::Nil()}, t)), 
    Num => RichTerm::new(Term::Num(<>)),
    Bool => RichTerm::new(Term::Bool(<>)),
    Str => RichTerm::new(Term::Str(<>)),
    Ident => RichTerm::new(Term::Var(<>)),
    "`" <Ident> => RichTerm::new(Term::Enum(<>)),
};

Pattern: Ident = {
    Ident,
};

Ident: Ident = r"[[:alpha:]_][[:word:]-]*" => Ident(<>.to_string());

Num: f64 = r"[-+]?[0-9]*\.?[0-9]+" => f64::from_str(<>).unwrap();

Bool: bool = {
    "true" => true,
    "false" => false,
};

Str: String = {
    <x:r#""(([^\\"]|\\.)*)""#> => x[1..(x.len() - 1)].to_string(),
}

UOp: UnaryOp = {
    "isZero" => UnaryOp::IsZero(),
    "isNum" => UnaryOp::IsNum(),
    "isBool" => UnaryOp::IsBool(),
    "isStr" => UnaryOp::IsStr(),
    "isFun" => UnaryOp::IsFun(),
    "blame" => UnaryOp::Blame(),
    "chngPol" => UnaryOp::ChangePolarity(),
    "polarity" => UnaryOp::Pol(),
    "goDom" => UnaryOp::GoDom(),
    "goCodom" => UnaryOp::GoCodom(),
    "tag[" <DbgStr> "]" => UnaryOp::Tag(<>),
    "wrap" => UnaryOp::Wrap(),
    "embed" <Ident> => UnaryOp::Embed(<>),
    "switch" "{" <ds: (switch_def ",")*> "}" => 
        UnaryOp::Switch(
            ds.clone().into_iter().map(|x| x.0).filter_map(
                |x| match x {Left(y) => Some(y), Right(_) => None}
            ).collect(),
            ds.into_iter().map(|x| x.0).find_map(
                |x| match x {Left(_) => None, Right(y) => Some(y)})
            ),
};

switch_def: Either<(Ident, RichTerm), RichTerm> = {
    <id: Ident> "=>" <t: SpTerm<Atom> > => Left((id, t)),
    "_" "=>" <SpTerm<Atom>> => Right(<>),
}

BOpIn: BinaryOp = {
    "+" => BinaryOp::Plus(),
    "++" => BinaryOp::PlusStr(),
    "=b" => BinaryOp::EqBool(),
};

BOpPre: BinaryOp = {
    "unwrap" => BinaryOp::Unwrap(),
}

Types: Types = {
    "forall" <id: Ident> "." <ty: Arrows> => Types(AbsType::Forall(id, Box::new(ty))),
    <Arrows>
}

Arrows: Types = {
    <s: subType> "->" <t:Arrows> => Types(AbsType::Arrow(Box::new(s), Box::new(t))),
    <subType>,
};

subType : Types = {
    "Dyn" => Types(AbsType::Dyn()),
    "Num" => Types(AbsType::Num()),
    "Bool" => Types(AbsType::Bool()),
    "Str" => Types(AbsType::Str()),
    <Ident> => Types(AbsType::Var(<>)),
    "#" <SpTerm<RichTerm>> => Types(AbsType::Flat(<>)),
    "(" <Types> ")" => <>,
    "(|" <r:(<Ident> ",")*> "|" <rest: Ident?> ")" => 
        r.iter().fold(
            Types(
                match rest {
                    Some(id) => AbsType::Var(id),
                    None => AbsType::RowEmpty(),
                }
            ),
            |t, i| Types(AbsType::RowExtend(i.clone(), Box::new(t)))), 
    "<" <subType> ">" => Types(AbsType::Enum(Box::new(<>))),
};

DbgStr: String = r"[[:alpha:]_][[:word:]-]*" => <>.to_string();
