use crate::identifier::Ident;
use crate::term::{BinaryOp, RichTerm, Term, UnaryOp, StrChunk, MetaValue,
    MergePriority, Contract, NAryOp};
use crate::term::make as mk_term;
use crate::{mk_app, mk_opn};
use crate::types::{Types, AbsType};
use super::ExtendedTerm;
use super::utils::{StringKind, mk_pos, mk_label, strip_indent, SwitchCase,
    FieldPathElem, strip_indent_doc, build_record, elaborate_field_path,
    ChunkLiteralPart};
use std::ffi::OsString;
use super::lexer::{Token, NormalToken, StringToken, MultiStringToken, LexicalError};
use std::collections::HashMap;
use codespan::FileId;

grammar<'input>(src_id: FileId);

WithPos<Rule>: RichTerm = <l: @L> <t: Rule> <r: @R> => t.with_pos(mk_pos(src_id, l, r));

TypeAnnot: MetaValue = ":" <l: @L> <ty: Types> <r: @R> => MetaValue {
    doc: None,
    types: Some(Contract {types: ty.clone(), label: mk_label(ty, src_id, l, r)}),
    contracts: Vec::new(),
    priority: Default::default(),
    value: None,
};

MetaAnnotAtom: MetaValue = {
    "|" <l: @L> <ty: Types> <r: @R> => MetaValue {
        doc: None,
        types: None,
        contracts: vec![Contract {types: ty.clone(), label: mk_label(ty, src_id, l, r)}],
        priority: Default::default(),
        value: None,
    },
    "|" "default" => MetaValue {
        doc: None,
        types: None,
        contracts: Vec::new(),
        priority: MergePriority::Default,
        value: None,
    },
    "|" "doc" <s: StaticString> => MetaValue {
        doc: Some(strip_indent_doc(s)),
        types: None,
        contracts: Vec::new(),
        priority: Default::default(),
        value: None,
    },
};

MetaAnnot: MetaValue = <anns: MetaAnnotAtom+> => anns.into_iter().fold(MetaValue::new(), MetaValue::flatten);

Annot: MetaValue = {
    <TypeAnnot>,
    <ty_ann: TypeAnnot?> <meta: MetaAnnot> => {
        if let Some(ty_meta) = ty_ann {
            MetaValue::flatten(ty_meta, meta)
        }
        else {
            meta
        }
    }
};

LeftOp<Op, Current, Previous>: RichTerm =
    <t1: Current> <op: Op> <t2: Previous> => mk_term::op2(op, t1, t2);

LeftOpLazy<Op, Current, Previous>: RichTerm =
    <t1: Current> <op: Op> <t2: Previous> => mk_app!(Term::Op1(op, t1), t2);

pub Term: RichTerm = WithPos<RootTerm>;

pub ExtendedTerm: ExtendedTerm = {
    "let" <id:Ident> <meta: Annot?> "=" <t: Term> => {
        let pos = t.pos;

        let t = if let Some(mut meta) = meta {
            meta.value = Some(t);
            RichTerm::new(Term::MetaValue(meta), pos)
        }
        else {
            t
        };

        ExtendedTerm::ToplevelLet(id, t)
    },
    Term => ExtendedTerm::RichTerm(<>),
}

RootTerm: RichTerm = {
    "let" <id:Ident> <meta: Annot?> "=" <t1: Term> "in"
        <t2: Term> => {
        let pos = t1.pos;
        let t1 = if let Some(mut meta) = meta {
            meta.value = Some(t1);
            RichTerm::new(Term::MetaValue(meta), pos)
        }
        else {
            t1
        };

        mk_term::let_in(id, t1, t2)
    },
    <l: @L> "fun" <ps:Pattern+> "=>" <t: Term> <r: @R> => {
        let pos = mk_pos(src_id, l, r);
        ps.into_iter().rev().fold(t, |t, p| RichTerm {
            term: Box::new(Term::Fun(p, t)),
            pos,
        })
    },
    "switch" "{" <cases: (switch_case ",")*> <last: switch_case?> "}"
        <exp: Term> => {
        let mut acc = HashMap::with_capacity(cases.len());
        let mut default = None;

        for case in cases.into_iter().map(|x| x.0).chain(last.into_iter()) {
            match case {
                SwitchCase::Normal(id, t) => acc.insert(id, t),
                // If there are multiple default cases, the last one silently
                // erases the others. We should have a dedicated error for that
                SwitchCase::Default(t) => default.replace(t),
            };
        }

        RichTerm::from(
            Term::Switch(
                exp,
                acc,
                default,
            )
        )
    },
    "if" <cond: Term> "then" <t1: Term> "else" <t2: Term> =>
        mk_app!(Term::Op1(UnaryOp::Ite(), cond), t1, t2),
    AnnotatedTerm,
};

AnnotatedTerm: RichTerm = {
    <t: WithPos<Infix>> <meta: Annot?> => {
        let pos = t.pos;

        if let Some(mut meta) = meta {
            meta.value = Some(t);
            RichTerm::new(Term::MetaValue(meta), pos)
        }
        else {
            t
        }
    },
};

Infix: RichTerm = {
    "import" <s: StaticString> => RichTerm::from(Term::Import(OsString::from(s))),
    InfixExpr,
};

Applicative: RichTerm = {
    <t1:WithPos<Applicative>> <t2: WithPos<RecordOperand>> => mk_app!(t1, t2),
    <op: UOp> <t: WithPos<RecordOperand>> => mk_term::op1(op, t),
    <op: BOpPre> <t1: WithPos<RecordOperand>> <t2: WithPos<Atom>> => mk_term::op2(op, t1, t2),
    NOpPre<WithPos<RecordOperand>>,
    RecordOperand,
};

RecordOperand: RichTerm = {
    Atom,
    RecordOperationChain,
}

RecordOperationChain: RichTerm = {
    <t: WithPos<RecordOperand>> "." <id: Ident> => mk_term::op1(UnaryOp::StaticAccess(id), t),
    <t: WithPos<RecordOperand>> "." <t_id: StrChunks> => mk_term::op2(BinaryOp::DynAccess(), t_id, t),
    <t: WithPos<RecordOperand>> "-$" <t_id: WithPos<Atom>> => mk_term::op2(BinaryOp::DynRemove(), t_id, t),
    <r: WithPos<RecordOperand>> "$[" <id: Term> "=" <t: Term> "]" =>
        mk_app!(mk_term::op2(BinaryOp::DynExtend(), id, r), t),
};

Atom: RichTerm = {
    "(" <Term> ")",
    "num literal" => RichTerm::from(Term::Num(<>)),
    "null" => RichTerm::from(Term::Null),
    Bool => RichTerm::from(Term::Bool(<>)),
    StrChunks,
    Ident => RichTerm::from(Term::Var(<>)),
    "`" <Ident> => RichTerm::from(Term::Enum(<>)),
    "{" <fields: (<RecordField> ",")*> <last: RecordField?> "}" => {
        let fields = fields.into_iter().chain(last.into_iter());
        RichTerm::from(build_record(fields))
    },
    "[" <terms: (<Term> ",")*> <last: Term?> "]" => {
        let terms : Vec<RichTerm> = terms.into_iter()
            .chain(last.into_iter()).collect();
        RichTerm::from(Term::List(terms))
    }
};

RecordField: (FieldPathElem, RichTerm) = {
    <path: FieldPath> <ty_ann: TypeAnnot?> "=" <t: Term> => {
        let t = if let Some(mut meta) = ty_ann {
            let pos = t.pos;
            meta.value = Some(t);
            RichTerm::new(Term::MetaValue(meta), pos)
        }
        else {
            t
        };

        elaborate_field_path(path, t)
    },
    <path: FieldPath> <ty_ann: TypeAnnot> <meta: MetaAnnot> "=" <t: Term> => {
        let pos = t.pos;
        let mut meta = MetaValue::flatten(ty_ann, meta);
        meta.value = Some(t);
        let t = RichTerm::new(Term::MetaValue(meta), pos);

        elaborate_field_path(path, t)
    },
    <l: @L> <path: FieldPath> <meta: MetaAnnot> <r: @R> <t: ("=" <Term>)?> => {
        let mut meta = meta;
        let pos = t.as_ref()
            .map(|t| t.pos.clone())
            .unwrap_or(mk_pos(src_id, l, r));
        meta.value = t;
        let t = RichTerm::new(Term::MetaValue(meta), pos);
        elaborate_field_path(path, t)
    }
}

FieldPath: Vec<FieldPathElem> = {
    <elems: (<FieldPathElem> ".")*> <last: FieldPathElem> => {
        let mut elems = elems;
        elems.push(last);
        elems
    }
};

FieldPathElem: FieldPathElem = {
    <Ident> => FieldPathElem::Ident(<>),
    <StrChunks> => FieldPathElem::Expr(<>),
};

Pattern: Ident = {
    Ident,
};

Ident: Ident = "identifier" => Ident(<>.to_string());

Bool: bool = {
    "true" => true,
    "false" => false,
};

StrChunks : RichTerm = {
  <start: StringStart> <fst: ChunkLiteral?> <chunks: (ChunkExpr+ChunkLiteral)*> <lasts:
    ChunkExpr*> <end: StringEnd> => {
        debug_assert_eq!(start, end);

        let chunks: Vec<StrChunk<RichTerm>> = fst.into_iter()
            .map(StrChunk::Literal)
            .chain(chunks.into_iter()
                .map(|(mut es, s)| {
                    es.push(StrChunk::Literal(s));
                    es
                })
                .flatten())
            .chain(lasts.into_iter())
            .collect();

        let mut chunks = if start == StringKind::Multiline {
            strip_indent(chunks)
        }
        else {
            chunks
        };
        chunks.reverse();

        RichTerm::from(Term::StrChunks(chunks))
    },
};

StringStart : StringKind = {
    "\"" => StringKind::Standard,
    "m#\"" => StringKind::Multiline,
};

StringEnd : StringKind = {
    "\"" => StringKind::Standard,
    "\"#m" => StringKind::Multiline,
};

ChunkLiteral : String =
    <parts: ChunkLiteralPart+> => {
        parts.into_iter().fold(String::new(), |mut acc, part| {
            match part {
                ChunkLiteralPart::Str(s) => acc.push_str(s),
                ChunkLiteralPart::Char(c) => acc.push(c),
            };

            acc
        })
    };

ChunkExpr: StrChunk<RichTerm> = HashBrace <t: WithPos<Term>> "}" => StrChunk::Expr(t, 0);

HashBrace = { "#{", "multstr #{" };

StaticString: String = StringStart <s: ChunkLiteral> StringEnd => s;

ChunkLiteralPart: ChunkLiteralPart<'input> = {
    "str literal" => ChunkLiteralPart::Str(<>),
    "str #" => ChunkLiteralPart::Str(<>),
    "multstr literal" => ChunkLiteralPart::Str(<>),
    "false interpolation" => ChunkLiteralPart::Str(<>),
    "false end" => ChunkLiteralPart::Str(<>),
    "str esc char" => ChunkLiteralPart::Char(<>),
    };

UOp: UnaryOp = {
    "isNum" => UnaryOp::IsNum(),
    "isBool" => UnaryOp::IsBool(),
    "isStr" => UnaryOp::IsStr(),
    "isFun" => UnaryOp::IsFun(),
    "isList" => UnaryOp::IsList(),
    "isRecord" => UnaryOp::IsRecord(),
    "blame" => UnaryOp::Blame(),
    "chngPol" => UnaryOp::ChangePolarity(),
    "polarity" => UnaryOp::Pol(),
    "goDom" => UnaryOp::GoDom(),
    "goCodom" => UnaryOp::GoCodom(),
    "goList" => UnaryOp::GoList(),
    "wrap" => UnaryOp::Wrap(),
    "embed" <Ident> => UnaryOp::Embed(<>),
    "map"  => UnaryOp::ListMap(),
    "generate" => UnaryOp::ListGen(),
    "recordMap" => UnaryOp::RecordMap(),
    "seq" => UnaryOp::Seq(),
    "deepSeq" => UnaryOp::DeepSeq(),
    "head" => UnaryOp::ListHead(),
    "tail" => UnaryOp::ListTail(),
    "length" => UnaryOp::ListLength(),
    "fieldsOf" => UnaryOp::FieldsOf(),
    "valuesOf" => UnaryOp::ValuesOf(),
    "strTrim" => UnaryOp::StrTrim(),
    "strChars" => UnaryOp::StrChars(),
    "charCode" => UnaryOp::CharCode(),
    "charFromCode" => UnaryOp::CharFromCode(),
    "strUppercase" => UnaryOp::StrUppercase(),
    "strLowercase" => UnaryOp::StrLowercase(),
    "strLength" => UnaryOp::StrLength(),
    "strFrom" => UnaryOp::StrFrom(),
    "numFrom" => UnaryOp::NumFrom(),
    "enumFrom" => UnaryOp::EnumFrom(),
};

switch_case: SwitchCase = {
    <id: Ident> "=>" <t: Term> => SwitchCase::Normal(id, t),
    "_" "=>" <t: Term> => SwitchCase::Default(<>),
}

// TODO: convenience for messing with precedence levels during development. Once
// operators are fixed, we can inline `InfixExpr0` into `InfixExpr1`
InfixExpr0: RichTerm = {
    Applicative,
}

PrefixExpr1: RichTerm = {
    InfixExpr0,
    "-" <t: PrefixExpr1> =>
        mk_term::op2(BinaryOp::Sub(), Term::Num(0.0), t),
}

BinOp2: BinaryOp = {
    "++" => BinaryOp::PlusStr(),
    "@" => BinaryOp::ListConcat(),
}

InfixExpr2: RichTerm = {
    PrefixExpr1,
    LeftOp<BinOp2, InfixExpr2, PrefixExpr1> => <>,
}

BinOp3: BinaryOp = {
    "*" => BinaryOp::Mult(),
    "/" => BinaryOp::Div(),
    "%" => BinaryOp::Modulo(),
}

InfixExpr3: RichTerm = {
    InfixExpr2,
    LeftOp<BinOp3, InfixExpr3, InfixExpr2> => <>,
}

BinOp4: BinaryOp = {
    "+" => BinaryOp::Plus(),
    "-" => BinaryOp::Sub(),
}

InfixExpr4: RichTerm = {
    InfixExpr3,
    LeftOp<BinOp4, InfixExpr4, InfixExpr3> => <>,
}

PrefixExpr5: RichTerm = {
    InfixExpr4,
    "!" <PrefixExpr5> => mk_term::op1(UnaryOp::BoolNot(), <>),
}

BinOp6: BinaryOp = {
    "&" => BinaryOp::Merge(),
}

PrefixExpr6: RichTerm = {
    PrefixExpr5,
    LeftOp<BinOp6, PrefixExpr6, PrefixExpr5> => <>,
}

BinOp7: BinaryOp = {
    "<" => BinaryOp::LessThan(),
    "<=" => BinaryOp::LessOrEq(),
    ">" => BinaryOp::GreaterThan(),
    ">=" => BinaryOp::GreaterOrEq(),
}

InfixExpr7: RichTerm = {
    PrefixExpr6,
    LeftOp<BinOp7, InfixExpr7, PrefixExpr6> => <>,
}

BinOp8: BinaryOp = {
    "==" => BinaryOp::Eq(),
}

InfixExpr8: RichTerm = {
    InfixExpr7,
    LeftOp<BinOp8, InfixExpr8, InfixExpr7> => <>,
    <t1: InfixExpr8> "!=" <t2: InfixExpr7> =>
        mk_term::op1( UnaryOp::BoolNot(), Term::Op2(BinaryOp::Eq(), t1, t2)),
}

LazyBinOp9: UnaryOp = {
    "&&" => UnaryOp::BoolAnd(),
}

InfixExpr9: RichTerm = {
    InfixExpr8,
    LeftOpLazy<LazyBinOp9, InfixExpr9, InfixExpr8> => <>
}

LazyBinOp10: UnaryOp = {
    "||" => UnaryOp::BoolOr(),
}

InfixExpr10: RichTerm = {
    InfixExpr9,
    LeftOpLazy<LazyBinOp10, InfixExpr10, InfixExpr9> => <>
}

// TODO: convenience for adding precedence levels during development. Once
// operators are fixed, we should turn the last level into `InfixExpr` directly
InfixExpr: RichTerm = {
    InfixExpr10,
}

BOpPre: BinaryOp = {
    "unwrap" => BinaryOp::Unwrap(),
    "goField" => BinaryOp::GoField(),
    "hasField" => BinaryOp::HasField(),
    "elemAt" => BinaryOp::ListElemAt(),
    "tag" => BinaryOp::Tag(),
    "hash" => BinaryOp::Hash(),
    "serialize" => BinaryOp::Serialize(),
    "deserialize" => BinaryOp::Deserialize(),
    "pow" => BinaryOp::Pow(),
    "strSplit" => BinaryOp::StrSplit(),
    "strContains" => BinaryOp::StrContains(),
    "strMatch" => BinaryOp::StrMatch(),
}

NOpPre<ArgRule>: RichTerm = {
    "strReplace" <t1: ArgRule> <t2: ArgRule> <t3: ArgRule> =>
        mk_opn!(NAryOp::StrReplace(), t1, t2, t3),
    "strSubstr" <t1: ArgRule> <t2: ArgRule> <t3: ArgRule> =>
        mk_opn!(NAryOp::StrSubstr(), t1, t2, t3),
}

Types: Types = {
    "forall" <ids: Ident+> "." <ty: Arrows> =>
        ids.into_iter().rev().fold(
            ty,
            |acc, id| Types(AbsType::Forall(id, Box::new(acc)))
        ),
    <Arrows>
}

Arrows: Types = {
    <s: subType> "->" <t:Arrows> => Types(AbsType::Arrow(Box::new(s), Box::new(t))),
    <subType>,
};

BaseType: Types = {
    "Dyn" => Types(AbsType::Dyn()),
    "Num" => Types(AbsType::Num()),
    "Bool" => Types(AbsType::Bool()),
    "Str" => Types(AbsType::Str()),
};

RowTail: Types = {
    <Ident> => Types(AbsType::Var(<>)),
    "Dyn" => Types(AbsType::Dyn()),
}

subType : Types = {
    <BaseType>,
    "List" <ty: subType?> => {
        let ty = Box::new(ty.unwrap_or(Types(AbsType::Dyn())));
        Types(AbsType::List(ty))
    },
    <Ident> => Types(AbsType::Var(<>)),
    "#" <WithPos<Atom>> => Types(AbsType::Flat(<>)),
    "(" <Types> ")" => <>,
    "<" <rows:(<Ident> ",")*> <last: (<Ident>)?> <tail: ("|" <Ident>)?> ">" => {
        let ty = rows.into_iter()
            .chain(last.into_iter())
            // As we build row types as a linked list via a fold on the original
            // iterator, the order of identifiers is reversed. This not a big deal
            // but it's less confusing to the user to print them in the original
            // order for error reporting.
            .rev()
            .fold(
                Types(
                    match tail {
                        Some(id) => AbsType::Var(id),
                        None => AbsType::RowEmpty(),
                    }
                ),
                |t, i| Types(AbsType::RowExtend(i, None, Box::new(t)))
            );
        Types(AbsType::Enum(Box::new(ty)))
    },
    "{" <rows:(<Ident> ":" <Types> ",")*>
        <last:(<Ident> ":" <Types>)?>
        <tail: ("|" <RowTail>)?> "}" => {
        let ty = rows.into_iter()
            .chain(last.into_iter())
            // As we build row types as a linked list via a fold on the original
            // iterator, the order of identifiers is reversed. This not a big deal
            // but it's less confusing to the user to print them in the original
            // order for error reporting.
            .rev()
            .fold(
                tail.unwrap_or(Types(AbsType::RowEmpty())),
                |t, i_ty| {
                    let (i, ty) = i_ty;
                    Types(AbsType::RowExtend(i, Some(Box::new(ty)), Box::new(t)))
                }
            );
        Types(AbsType::StaticRecord(Box::new(ty)))
    },
    "{" "_" ":" <Types> "}" => Types(AbsType::DynRecord(Box::new(<>))),
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "identifier" => Token::Normal(NormalToken::Identifier(<&'input str>)),
        "str literal" => Token::Str(StringToken::Literal(<&'input str>)),
        "str #" => Token::Str(StringToken::Hash(<&'input str>)),
        "str esc char" => Token::Str(StringToken::EscapedChar(<char>)),
        "multstr literal" => Token::MultiStr(MultiStringToken::Literal(<&'input str>)),
        "false end" => Token::MultiStr(MultiStringToken::FalseEnd(<&'input str>)),
        "false interpolation" => Token::MultiStr(MultiStringToken::FalseInterpolation(<&'input str>)),
        "num literal" => Token::Normal(NormalToken::NumLiteral(<f64>)),

        "if" => Token::Normal(NormalToken::If),
        "then" => Token::Normal(NormalToken::Then),
        "else" => Token::Normal(NormalToken::Else),
        "forall" => Token::Normal(NormalToken::Forall),
        "in" => Token::Normal(NormalToken::In),
        "let" => Token::Normal(NormalToken::Let),
        "switch" => Token::Normal(NormalToken::Switch),

        "null" => Token::Normal(NormalToken::Null),
        "true" => Token::Normal(NormalToken::True),
        "false" => Token::Normal(NormalToken::False),

        "," => Token::Normal(NormalToken::Comma),
        ":" => Token::Normal(NormalToken::Colon),
        "$" => Token::Normal(NormalToken::Dollar),
        "=" => Token::Normal(NormalToken::Equals),
        "!=" => Token::Normal(NormalToken::NotEquals),
        "&" => Token::Normal(NormalToken::Ampersand),
        "." => Token::Normal(NormalToken::Dot),
        "$[" => Token::Normal(NormalToken::DollarBracket),
        "#{" => Token::Str(StringToken::HashBrace),
        "multstr #{" => Token::MultiStr(MultiStringToken::Interpolation),
        "-$" => Token::Normal(NormalToken::MinusDollar),

        "+" => Token::Normal(NormalToken::Plus),
        "-" => Token::Normal(NormalToken::Minus),
        "*" => Token::Normal(NormalToken::Times),
        "/" => Token::Normal(NormalToken::Div),
        "%" => Token::Normal(NormalToken::Percent),
        "++" => Token::Normal(NormalToken::DoublePlus),
        "==" => Token::Normal(NormalToken::DoubleEq),
        "@" => Token::Normal(NormalToken::At),
        "&&" => Token::Normal(NormalToken::DoubleAnd),
        "||" => Token::Normal(NormalToken::DoublePipe),
        "!" => Token::Normal(NormalToken::Bang),

        "fun" => Token::Normal(NormalToken::Fun),
        "import" => Token::Normal(NormalToken::Import),
        "|" => Token::Normal(NormalToken::Pipe),
        "->" => Token::Normal(NormalToken::SimpleArrow),
        "=>" => Token::Normal(NormalToken::DoubleArrow),
        "#" => Token::Normal(NormalToken::Hash),
        "`" => Token::Normal(NormalToken::Backtick),
        "_" => Token::Normal(NormalToken::Underscore),
        "\"" => Token::Normal(NormalToken::DoubleQuote),
        "\"#m" => Token::MultiStr(MultiStringToken::End),
        "m#\"" => Token::Normal(NormalToken::MultiStringStart(<usize>)),

        "Num" => Token::Normal(NormalToken::Num),
        "Dyn" => Token::Normal(NormalToken::Dyn),
        "Str" => Token::Normal(NormalToken::Str),
        "Bool" => Token::Normal(NormalToken::Bool),
        "List" => Token::Normal(NormalToken::List),

        "tag" => Token::Normal(NormalToken::Tag),
        "isNum" => Token::Normal(NormalToken::IsNum),
        "isBool" => Token::Normal(NormalToken::IsBool),
        "isStr" => Token::Normal(NormalToken::IsStr),
        "isFun" => Token::Normal(NormalToken::IsFun),
        "isList" => Token::Normal(NormalToken::IsList),
        "isRecord" => Token::Normal(NormalToken::IsRecord),
        "blame" => Token::Normal(NormalToken::Blame),
        "chngPol" => Token::Normal(NormalToken::ChangePol),
        "polarity" => Token::Normal(NormalToken::Polarity),
        "goDom" => Token::Normal(NormalToken::GoDom),
        "goCodom" => Token::Normal(NormalToken::GoCodom),
        "goList" => Token::Normal(NormalToken::GoList),
        "goField" => Token::Normal(NormalToken::GoField),
        "wrap" => Token::Normal(NormalToken::Wrap),
        "unwrap" => Token::Normal(NormalToken::Unwrap),
        "embed" => Token::Normal(NormalToken::Embed),
        "recordMap" => Token::Normal(NormalToken::RecordMap),
        "seq" => Token::Normal(NormalToken::Seq),
        "deepSeq" => Token::Normal(NormalToken::DeepSeq),
        "head" => Token::Normal(NormalToken::Head),
        "tail" => Token::Normal(NormalToken::Tail),
        "length" => Token::Normal(NormalToken::Length),
        "fieldsOf" => Token::Normal(NormalToken::FieldsOf),
        "valuesOf" => Token::Normal(NormalToken::ValuesOf),
        "pow" => Token::Normal(NormalToken::Pow),

        "hasField" => Token::Normal(NormalToken::HasField),
        "map" => Token::Normal(NormalToken::Map),
        "generate" => Token::Normal(NormalToken::ListGen),
        "elemAt" => Token::Normal(NormalToken::ElemAt),
        "merge" => Token::Normal(NormalToken::Merge),
        "default" => Token::Normal(NormalToken::Default),
        "doc" => Token::Normal(NormalToken::Doc),

        "hash" => Token::Normal(NormalToken::OpHash),
        "serialize" => Token::Normal(NormalToken::Serialize),
        "deserialize" => Token::Normal(NormalToken::Deserialize),
        "strSplit" => Token::Normal(NormalToken::StrSplit),
        "strTrim" => Token::Normal(NormalToken::StrTrim),
        "strChars" => Token::Normal(NormalToken::StrChars),
        "charCode" => Token::Normal(NormalToken::CharCode),
        "charFromCode" => Token::Normal(NormalToken::CharFromCode),
        "strUppercase" => Token::Normal(NormalToken::StrUppercase),
        "strLowercase" => Token::Normal(NormalToken::StrLowercase),
        "strContains" => Token::Normal(NormalToken::StrContains),
        "strReplace" => Token::Normal(NormalToken::StrReplace),
        "strMatch" => Token::Normal(NormalToken::StrMatch),
        "strLength" => Token::Normal(NormalToken::StrLength),
        "strSubstr" => Token::Normal(NormalToken::StrSubstr),
        "strFrom" => Token::Normal(NormalToken::StrFrom),
        "numFrom" => Token::Normal(NormalToken::NumFrom),
        "enumFrom" => Token::Normal(NormalToken::EnumFrom),

        "{" => Token::Normal(NormalToken::LBrace),
        "}" => Token::Normal(NormalToken::RBrace),
        "[" => Token::Normal(NormalToken::LBracket),
        "]" => Token::Normal(NormalToken::RBracket),
        "(" => Token::Normal(NormalToken::LParen),
        ")" => Token::Normal(NormalToken::RParen),
        "<" => Token::Normal(NormalToken::LAngleBracket),
        "<=" => Token::Normal(NormalToken::LessOrEq),
        ">" => Token::Normal(NormalToken::RAngleBracket),
        ">=" => Token::Normal(NormalToken::GreaterOrEq),
    }
}
